<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference | The Journeyman Modeler</title><link>https://jmodeler.github.io/category/reference/</link><atom:link href="https://jmodeler.github.io/category/reference/index.xml" rel="self" type="application/rss+xml"/><description>Reference</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 25 Mar 2023 00:00:00 +0000</lastBuildDate><image><url>https://jmodeler.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Reference</title><link>https://jmodeler.github.io/category/reference/</link></image><item><title>Resolving Install Errors for the lightweight_mmm Python Package</title><link>https://jmodeler.github.io/post/resolving-install-errors-for-the-lightweight-mmm-python-package/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://jmodeler.github.io/post/resolving-install-errors-for-the-lightweight-mmm-python-package/</guid><description>
&lt;p>To experiment with different specifications of a marketing mix model, I tried installing the &lt;a href="https://github.com/google/lightweight_mmm">lightweight_mmm&lt;/a> Python package from Google. When using the standard &lt;code>pip3 install lightweight_mmm&lt;/code> command in terminal, I was hitting this error:&lt;/p>
&lt;pre>&lt;code> × Getting requirements to build wheel did not run successfully.
│ exit code: 1
╰─&amp;gt; [66 lines of output]
The Meson build system
Version: 0.62.2
Source dir: /private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-install-yc6ribm7/scipy_ae66ccfb8522422ab91e65b44570f273
Build dir: /private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-install-yc6ribm7/scipy_ae66ccfb8522422ab91e65b44570f273/.mesonpy-ur2kyhcf/build
Build type: native build
Project name: SciPy
Project version: 1.9.1
C compiler for the host machine: cc (clang 14.0.0 &amp;quot;Apple clang version 14.0.0 (clang-1400.0.29.202)&amp;quot;)
C linker for the host machine: cc ld64 820.1
C++ compiler for the host machine: c++ (clang 14.0.0 &amp;quot;Apple clang version 14.0.0 (clang-1400.0.29.202)&amp;quot;)
C++ linker for the host machine: c++ ld64 820.1
Host machine cpu family: x86_64
Host machine cpu: x86_64
Compiler for C supports arguments -Wno-unused-but-set-variable: YES
Library m found: YES
Fortran compiler for the host machine: gfortran (gcc 8.2.0 &amp;quot;GNU Fortran (GCC) 8.2.0&amp;quot;)
Fortran linker for the host machine: gfortran ld64 820.1
Program cython found: YES (/private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-build-env-gddbg9u0/overlay/bin/cython)
Program pythran found: YES (/private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-build-env-gddbg9u0/overlay/bin/pythran)
Program cp found: YES (/bin/cp)
Program python found: YES (/Users/&amp;lt;username&amp;gt;/.pyenv/versions/3.11.2/bin/python3.11)
Found pkg-config: /usr/local/bin/pkg-config (0.29.2)
Library npymath found: YES
Library npyrandom found: YES
Found CMake: /usr/local/bin/cmake (3.26.0)
Run-time dependency openblas found: NO (tried pkgconfig, framework and cmake)
Run-time dependency openblas found: NO (tried pkgconfig, framework and cmake)
../../scipy/meson.build:130:0: ERROR: Dependency &amp;quot;OpenBLAS&amp;quot; not found, tried pkgconfig, framework and cmake&lt;/code>&lt;/pre>
&lt;p>I tried to install &lt;code>openblas&lt;/code> using homebrew, but it was already installed:&lt;/p>
&lt;pre>&lt;code>$ brew install openblas
==&amp;gt; Downloading https://formulae.brew.sh/api/formula.jws.json
######################################################################## 100.0%
==&amp;gt; Downloading https://formulae.brew.sh/api/cask.jws.json
Warning: openblas 0.3.21 is already installed and up-to-date.
To reinstall 0.3.21, run:
brew reinstall openblas&lt;/code>&lt;/pre>
&lt;p>So maybe the build process was failing because the compiler couldn’t find it on the system. On some searching, I found this &lt;a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/7906#issuecomment-1478618523">github issue&lt;/a> that discussed the same problem. Essentially, we get more information on &lt;code>openblas&lt;/code>, using &lt;code>brew info openblas&lt;/code> in the terminal which should show us this output:&lt;/p>
&lt;pre>&lt;code>==&amp;gt; openblas: stable 0.3.21 (bottled), HEAD [keg-only]
Optimized BLAS library
https://www.openblas.net/
/usr/local/Cellar/openblas/0.3.21 (23 files, 130MB)
Poured from bottle on 2023-02-11 at 08:52:47
From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/openblas.rb
License: BSD-3-Clause
==&amp;gt; Dependencies
Required: gcc ✔
==&amp;gt; Options
--HEAD
Install HEAD version
==&amp;gt; Caveats
openblas is keg-only, which means it was not symlinked into /usr/local,
because macOS provides BLAS in Accelerate.framework.
For compilers to find openblas you may need to set:
export LDFLAGS=&amp;quot;-L/usr/local/opt/openblas/lib&amp;quot;
export CPPFLAGS=&amp;quot;-I/usr/local/opt/openblas/include&amp;quot;
For pkg-config to find openblas you may need to set:
export PKG_CONFIG_PATH=&amp;quot;/usr/local/opt/openblas/lib/pkgconfig&amp;quot;
==&amp;gt; Analytics
install: 1,074 (30 days), 63,095 (90 days), 515,454 (365 days)
install-on-request: 171 (30 days), 10,278 (90 days), 85,564 (365 days)
build-error: 4 (30 days)&lt;/code>&lt;/pre>
&lt;p>In the output above, we find the options to be set for compilers to find &lt;code>openblas&lt;/code>. I run these commands in the terminal:&lt;/p>
&lt;pre>&lt;code>$ export LDFLAGS=&amp;quot;-L/usr/local/opt/openblas/lib&amp;quot;
$ export CPPFLAGS=&amp;quot;-I/usr/local/opt/openblas/include&amp;quot;
$ export PKG_CONFIG_PATH=&amp;quot;/usr/local/opt/openblas/lib/pkgconfig&amp;quot;&lt;/code>&lt;/pre>
&lt;p>I now try installing &lt;code>lightweight_mmm&lt;/code> using &lt;code>pip3 install lightweight_mmm&lt;/code> in the terminal, and this time the installation gets past the step it was failing, but runs for a long time and fails again:&lt;/p>
&lt;pre>&lt;code> Using cached scipy-1.6.1.tar.gz (27.3 MB)
Installing build dependencies ... done
Getting requirements to build wheel ... done
Preparing metadata (pyproject.toml) ... error
error: subprocess-exited-with-error
× Preparing metadata (pyproject.toml) did not run successfully.
│ exit code: 1
╰─&amp;gt; [119 lines of output]
setup.py:461: UserWarning: Unrecognized setuptools command (&amp;#39;dist_info --egg-base /private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-modern-metadata-_yaq83ex&amp;#39;), proceeding with generating Cython sources and expanding templates
warnings.warn(&amp;quot;Unrecognized setuptools command (&amp;#39;{}&amp;#39;), proceeding with &amp;quot;
setup.py:563: DeprecationWarning:
`numpy.distutils` is deprecated since NumPy 1.23.0, as a result
of the deprecation of `distutils` itself. It will be removed for
Python &amp;gt;= 3.12. For older Python versions it will remain present.
It is recommended to use `setuptools &amp;lt; 60.0` for those Python versions.
For more details, see:
https://numpy.org/devdocs/reference/distutils_status_migration.html
from numpy.distutils.core import setup
Running from SciPy source directory.
INFO: lapack_opt_info:
INFO: lapack_armpl_info:
INFO: customize UnixCCompiler
INFO: libraries armpl_lp64_mp not found in [&amp;#39;/Users/&amp;lt;username&amp;gt;/.pyenv/versions/3.11.2/lib&amp;#39;, &amp;#39;/usr/local/lib&amp;#39;, &amp;#39;/usr/lib&amp;#39;]
INFO: NOT AVAILABLE
...&lt;/code>&lt;/pre>
&lt;p>On further searching, it appears &lt;a href="https://github.com/docker-library/python/issues/558">that the problem&lt;/a> could be the version of python I’m currently using (3.11.2).&lt;/p>
&lt;p>I tried using a version of Python &amp;lt; &lt;code>3.9&lt;/code> and checked if this was working. First, using the &lt;a href="https://jmodeler.github.io/post/setting-up-python-to-run-on-rmarkdown/">instructions here&lt;/a>, I used &lt;code>pyenv&lt;/code> to install version &lt;code>3.8.16&lt;/code>, with the &lt;code>--enable-shared&lt;/code> option:&lt;/p>
&lt;pre>&lt;code> $ env PYTHON_CONFIGURE_OPTS=&amp;quot;--enable-shared&amp;quot; pyenv install 3.8.16&lt;/code>&lt;/pre>
&lt;p>Next, I set this to be the global Python version&lt;/p>
&lt;pre>&lt;code> $ pyenv global 3.8.16&lt;/code>&lt;/pre>
&lt;p>I now try installing the package again using &lt;code>pip3 install lightweight_mmm&lt;/code>, and this time it works:&lt;/p>
&lt;pre>&lt;code>Installing collected packages: typing-extensions, tensorboard-plugin-wit, pytz, pyasn1, libclang, flatbuffers, zipp, wrapt, wheel, urllib3, tqdm, threadpoolctl, termcolor, tensorflow-io-gcs-filesystem, tensorflow-estimator, tensorboard-data-server, six, rsa, pyparsing, pyasn1-modules, protobuf, pillow, packaging, oauthlib, numpy, MarkupSafe, kiwisolver, keras, joblib, immutabledict, idna, grpcio, gast, fonttools, cycler, charset-normalizer, certifi, cachetools, absl-py, werkzeug, scipy, requests, python-dateutil, patsy, opt_einsum, multipledispatch, importlib-metadata, h5py, google-pasta, google-auth, contourpy, cftime, astunparse, scikit-learn, requests-oauthlib, pandas, netcdf4, matplotlib, markdown, jaxlib, jax, xarray, statsmodels, seaborn, numpyro, google-auth-oauthlib, tensorboard, arviz, tensorflow, lightweight_mmm
Running setup.py install for jax ... done
Successfully installed MarkupSafe-2.1.2 absl-py-1.4.0 arviz-0.11.2 astunparse-1.6.3 cachetools-5.3.0 certifi-2022.12.7 cftime-1.6.2 charset-normalizer-3.1.0 contourpy-1.0.7 cycler-0.11.0 flatbuffers-23.3.3 fonttools-4.39.2 gast-0.4.0 google-auth-2.16.3 google-auth-oauthlib-0.4.6 google-pasta-0.2.0 grpcio-1.51.3 h5py-3.8.0 idna-3.4 immutabledict-2.2.3 importlib-metadata-6.1.0 jax-0.4.6 jaxlib-0.4.6 joblib-1.2.0 keras-2.11.0 kiwisolver-1.4.4 libclang-16.0.0 lightweight_mmm-0.1.7 markdown-3.4.3 matplotlib-3.6.1 multipledispatch-0.6.0 netcdf4-1.6.3 numpy-1.24.2 numpyro-0.11.0 oauthlib-3.2.2 opt_einsum-3.3.0 packaging-23.0 pandas-1.5.3 patsy-0.5.3 pillow-9.4.0 protobuf-3.19.6 pyasn1-0.4.8 pyasn1-modules-0.2.8 pyparsing-3.0.9 python-dateutil-2.8.2 pytz-2023.2 requests-2.28.2 requests-oauthlib-1.3.1 rsa-4.9 scikit-learn-1.2.2 scipy-1.10.1 seaborn-0.11.1 six-1.16.0 statsmodels-0.13.5 tensorboard-2.11.2 tensorboard-data-server-0.6.1 tensorboard-plugin-wit-1.8.1 tensorflow-2.11.1 tensorflow-estimator-2.11.0 tensorflow-io-gcs-filesystem-0.31.0 termcolor-2.2.0 threadpoolctl-3.1.0 tqdm-4.65.0 typing-extensions-3.10.0.2 urllib3-1.26.15 werkzeug-2.2.3 wheel-0.40.0 wrapt-1.15.0 xarray-2023.1.0 zipp-3.15.0&lt;/code>&lt;/pre>
&lt;p>While searching for a fix, I found &lt;a href="https://pyreadiness.org/3.9/">this website&lt;/a> that looks at Python 3.9 support for the 360 most downloaded packages on &lt;a href="https://pyreadiness.org/3.9/">PyPi&lt;/a>.&lt;/p></description></item><item><title>Resolving Errors when Creating Your First MineRL Agent</title><link>https://jmodeler.github.io/post/resolving-errors-when-creating-your-first-minerl-agent/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><guid>https://jmodeler.github.io/post/resolving-errors-when-creating-your-first-minerl-agent/</guid><description>
&lt;p>In this post, I lay out the steps to follow to resolve the errors you see when creating your &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/first_agent.html">first MineRL agent&lt;/a> on a macOS. This is a continuation of &lt;a href="https://jmodeler.github.io/post/resolving-install-errors-with-minerl/">this post&lt;/a>, which looks at resolving install errors on the &lt;code>minerl&lt;/code> package.&lt;/p>
&lt;p>I borrow heavily from &lt;a href="https://github.com/minerllabs/minerl/issues/659#issuecomment-1306635414">this github issue comment&lt;/a>.&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>&lt;p>Clone the repository using the terminal command below&lt;/p>
&lt;pre>&lt;code> git clone https://github.com/minerllabs/minerl.git&lt;/code>&lt;/pre>
&lt;p>This will create a &lt;code>minerl&lt;/code> directory. Make sure that the path to the cloned repository does not have spaces in it (i.e. the path should &lt;strong>not&lt;/strong> be &lt;code>/Users/&amp;lt;username&amp;gt;/minerl folder/minerl&lt;/code> – you will get &lt;code>file not found&lt;/code> errors in the next few steps otherwise)&lt;/p>&lt;/li>
&lt;li>&lt;p>Open the patch file in the directory &lt;code>minerl/scripts/mcp_patch.diff&lt;/code>, and replace version number &lt;code>3.2.1&lt;/code> to &lt;code>3.3.1&lt;/code> for &lt;code>lwjgl-opengl&lt;/code> (&lt;a href="https://github.com/minerllabs/minerl/blob/03510486957633676d269bf83115a84499ef7f47/scripts/mcp_patch.diff#L314">github link&lt;/a> to part of the file where the version number should be replaced)&lt;/p>&lt;/li>
&lt;li>&lt;p>From inside the &lt;code>minerl&lt;/code> folder on terminal, run the following command:&lt;/p>
&lt;pre>&lt;code> pip3 install .&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;p>If the installation fails, please go to this &lt;a href="https://jmodeler.github.io/post/resolving-install-errors-with-minerl/">post&lt;/a> and see if the steps outlined there can help.&lt;/p>&lt;/li>
&lt;li>&lt;p>If the installation is successful, navigate to the &lt;code>minerl/minerl/MCP-Reborn&lt;/code> folder and open the &lt;code>launchClient.sh&lt;/code> file in a text editor of choice. Modify a line close to the end of the file that starts with &lt;code>Java ....&lt;/code>, so that the new line becomes:&lt;/p>
&lt;pre>&lt;code> java -Xmx$maxMem -XstartOnFirstThread -jar $fatjar --envPort=$port&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;p>Navigate to &lt;code>MCP-Reborn/src/main/java/net/minecraft/client/MainWindow.java&lt;/code>, and make the following changes:&lt;/p>
&lt;ul>
&lt;li>&lt;p>Comment out the following line (add a &lt;code>//&lt;/code> to the left of this line)&lt;/p>
&lt;pre>&lt;code> GLFW.glfwSetWindowIcon(this.handle, buffer);&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;p>Comment out the body of the &lt;code>checkGlfwError&lt;/code> method, it should look like this after commenting out the body:&lt;/p>
&lt;pre>&lt;code> public static void checkGlfwError(BiConsumer&amp;lt;Integer, String&amp;gt; glfwErrorConsumer) {
/* RenderSystem.assertThread(RenderSystem::isInInitPhase);
try (MemoryStack memorystack = MemoryStack.stackPush()) {
PointerBuffer pointerbuffer = memorystack.mallocPointer(1);
int i = GLFW.glfwGetError(pointerbuffer);
if (i != 0) {
long j = pointerbuffer.get();
String s = j == 0L ? &amp;quot;&amp;quot; : MemoryUtil.memUTF8(j);
glfwErrorConsumer.accept(i, s);
}
} */
}&lt;/code>&lt;/pre>
&lt;p>&lt;strong>DO NOT&lt;/strong> comment out/delete the method declaration, else the next step will fail.&lt;/p>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;p>Navigate to the &lt;code>minerl/minerl/MCP-Reborn&lt;/code> folder in terminal and rebuild &lt;code>MCP-Reborn&lt;/code> using the command below:&lt;/p>
&lt;pre>&lt;code> ./gradlew clean build shadowJar&lt;/code>&lt;/pre>
&lt;p>You should see a success message like the one below:
&lt;img src="build_success.png" alt="Build Success" />&lt;/p>&lt;/li>
&lt;li>&lt;p>Find the location where the &lt;code>minerl&lt;/code> package was installed. If you use &lt;code>pyenv&lt;/code> like I do, you can use the &lt;code>pyenv which python&lt;/code> command in terminal, to get the version of python being used by the system. For example, if the version number is &lt;code>3.11.2&lt;/code>, then the location of the &lt;code>minerl&lt;/code> package should be:&lt;/p>
&lt;pre>&lt;code> /Users/&amp;lt;username&amp;gt;/.pyenv/versions/3.11.2/lib/python3.11/site-packages/minerl&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;p>Navigate to the &lt;code>minerl&lt;/code> folder above, and replace the &lt;code>MCP-Reborn&lt;/code> folder in it with the &lt;code>MCP-Reborn&lt;/code> folder you just built in step 7 above.&lt;/p>&lt;/li>
&lt;li>&lt;p>Follow the steps to &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/first_agent.html">build your first agent&lt;/a>, this should work now and you should see something like this:
&lt;img src="first_agent_run.png" alt="First Agent" />&lt;/p>&lt;/li>
&lt;/ol></description></item><item><title>Resolving Install Errors with MineRL</title><link>https://jmodeler.github.io/post/resolving-install-errors-with-minerl/</link><pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate><guid>https://jmodeler.github.io/post/resolving-install-errors-with-minerl/</guid><description>
&lt;p>In this post, I’ll resolve an error that one might face when trying to install the &lt;code>minerl&lt;/code> Python package. The instructions to install this package can be &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/index.html">found here&lt;/a>.&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>Using the instructions above, when I used the install command (&lt;code>pip3 install git+https://github.com/minerllabs/minerl&lt;/code>), I got the following error (only the relevant part is shown here):&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
100 errors
only showing the first 100 errors, of 2866 total; use -Xmaxerrs if you would like to see more
&amp;gt; Task :compileJava FAILED
FAILURE: Build failed with an exception.
* What went wrong:
Execution failed for task &amp;#39;:compileJava&amp;#39;.
&amp;gt; Compilation failed; see the compiler error output for details.
* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
* Get more help at https://help.gradle.org
Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use &amp;#39;--warning-mode all&amp;#39; to show the individual deprecation warnings.
See https://docs.gradle.org/6.8.1/userguide/command_line_interface.html#sec:command_line_warnings
BUILD FAILED in 21s
10 actionable tasks: 10 executed
Traceback (most recent call last):
File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
File &amp;quot;&amp;lt;pip-setuptools-caller&amp;gt;&amp;quot;, line 34, in &amp;lt;module&amp;gt;
File &amp;quot;/private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-req-build-9xj7s1on/setup.py&amp;quot;, line 214, in &amp;lt;module&amp;gt;
prep_mcp()
File &amp;quot;/private/var/folders/ly/3d_s7td56qb7rn4qc2c6tmvm0000gn/T/pip-req-build-9xj7s1on/setup.py&amp;quot;, line 198, in prep_mcp
subprocess.check_call(&amp;#39;{} clean build shadowJar&amp;#39;.format(gradlew).split(&amp;#39; &amp;#39;), cwd=workdir)
File &amp;quot;/Users/&amp;lt;username&amp;gt;/.pyenv/versions/3.11.2/lib/python3.11/subprocess.py&amp;quot;, line 413, in check_call
raise CalledProcessError(retcode, cmd)
subprocess.CalledProcessError: Command &amp;#39;[&amp;#39;./gradlew&amp;#39;, &amp;#39;clean&amp;#39;, &amp;#39;build&amp;#39;, &amp;#39;shadowJar&amp;#39;]&amp;#39; returned non-zero exit status 1.
[end of output]
note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed&lt;/code>&lt;/pre>
&lt;ol start="2" style="list-style-type: decimal">
&lt;li>Searching for the error message (&lt;code>error: metadata-generation-failed&lt;/code>) took me to a bunch of websites that provided other options to try:
&lt;ul>
&lt;li>From the &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/index.html">install page&lt;/a>, I tried providing the &lt;code>--user&lt;/code> option in the install command, that did not work, and I got the same error. This was the command I used: &lt;code>pip3 install git+https://github.com/minerllabs/minerl --user&lt;/code>&lt;/li>
&lt;li>From &lt;a href="https://stackoverflow.com/questions/74188013/python-pygame-not-installing">this stackoverflow page&lt;/a>, I used the &lt;code>--pre&lt;/code> option in the install command, that didn’t work either. This was the command I used: &lt;code>pip3 install git+https://github.com/minerllabs/minerl --pre&lt;/code>&lt;/li>
&lt;li>From &lt;a href="https://bobbyhadz.com/blog/python-error-metadata-generation-failed-encountered-error">this page&lt;/a>, I learnt about using the &lt;code>--use-deprecated&lt;/code> option, but that did not work too. This was the command I used: &lt;code>pip3 install git+https://github.com/minerllabs/minerl --use-deprecated=legacy-resolver&lt;/code>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>Going back to the &lt;code>minerl&lt;/code> &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/index.html">install page&lt;/a>, I checked the Java version, hoping that this was the issue:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> $ java -version
openjdk version &amp;quot;14.0.2&amp;quot; 2020-07-14
OpenJDK Runtime Environment (build 14.0.2+12-46)
OpenJDK 64-Bit Server VM (build 14.0.2+12-46, mixed mode, sharing)&lt;/code>&lt;/pre>
&lt;ol start="4" style="list-style-type: decimal">
&lt;li>My system was using the wrong version of Java (it should be using &lt;code>1.8._&lt;/code>)! I used the &lt;a href="https://gist.github.com/schnell18/bcb9833f725be22f6acd01f94b486392">instructions here&lt;/a>, to remove the other version of Java. These were the exact commands I used:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> $ sudo rm -fr /Library/Java/JavaVirtualMachines/openjdk-14.0.2.jdk/
$ sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin
$ sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane&lt;/code>&lt;/pre>
&lt;ol start="5" style="list-style-type: decimal">
&lt;li>If you encounter this error on a macOS, and the Java version is the cause, check your Java version using the &lt;code>java -version&lt;/code> command on terminal, and navigate to the &lt;code>/Library/Java/JavaVirtualMachines/&lt;/code> folder to find the other versions of Java on your machine. Then use the &lt;code>sudo&lt;/code> commands above to delete the appropriate folders. After deleting the other Java folder on my machine, typing &lt;code>java -version&lt;/code> in my terminal gave me the following result:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> $ java -version
openjdk version &amp;quot;1.8.0_292&amp;quot;
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_292-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.292-b10, mixed mode)&lt;/code>&lt;/pre>
&lt;ol start="6" style="list-style-type: decimal">
&lt;li>After doing this, the install command (&lt;code>pip3 install git+https://github.com/minerllabs/minerl&lt;/code>), worked fine on the terminal. I did see some error messages (around installation of the Python package &lt;code>gym&lt;/code>), but it didn’t appear to affect the installation:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> Failed to build gym
Installing collected packages: PyWavelets, Pyro4, opencv-python, matplotlib-inline, lxml,
jinja2, jedi, inflection, idna, humanfriendly, flaky, dill, decorator, cloudpickle, charset-normalizer,
certifi, asttokens, stack-data, requests, imagehash, gym, coloredlogs, ipython, minerl
Running setup.py install for gym ... done
DEPRECATION: gym was installed using the legacy &amp;#39;setup.py install&amp;#39;
method, because a wheel could not be built for it. pip 23.1 will enforce this behaviour change.
A possible replacement is to fix the wheel build issue reported above.
Discussion can be found at https://github.com/pypa/pip/issues/8368&lt;/code>&lt;/pre>
&lt;ol start="8" style="list-style-type: decimal">
&lt;li>Create your &lt;a href="https://minerl.readthedocs.io/en/latest/tutorials/first_agent.html">first agent&lt;/a> and check if everything is working properly. If the example linked does not work, refer to &lt;a href="https://jmodeler.github.io/post/resolving-errors-when-creating-your-first-minerl-agent/">this post&lt;/a>, or &lt;a href="https://github.com/minerllabs/minerl/issues/659#issuecomment-1306635414">this github issue comment&lt;/a>.&lt;/li>
&lt;/ol></description></item><item><title>Setting up Python to Run on Rmarkdown</title><link>https://jmodeler.github.io/post/setting-up-python-to-run-on-rmarkdown/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://jmodeler.github.io/post/setting-up-python-to-run-on-rmarkdown/</guid><description>
&lt;p>I use the &lt;a href="https://github.com/wowchemy/starter-hugo-academic">Hugo academic template&lt;/a> along with Rstudio’s &lt;a href="https://github.com/rstudio/blogdown">Blogdown&lt;/a> package to generate and deploy this website to &lt;a href="https://pages.github.com/">github pages&lt;/a>. I use this setup to generate blog posts (via &lt;a href="https://rmarkdown.rstudio.com/">Rmarkdown&lt;/a>) that render &lt;span class="math inline">\(\LaTeX\)&lt;/span> math and output from R code.&lt;/p>
&lt;p>Sometimes, I’d like to run Python code inside Rmarkdown too, and this is &lt;a href="https://bookdown.org/yihui/rmarkdown-cookbook/eng-python.html">supported&lt;/a>, via the &lt;a href="https://cran.r-project.org/web/packages/reticulate/index.html">reticulate&lt;/a> package. That said, the following steps need to be followed to make sure everything runs smoothly (all of these steps worked on a macOS Ventura operating system)&lt;/p>
&lt;ol style="list-style-type: decimal">
&lt;li>In your Rmarkdown file, always have this code chunk to setup Python use for later:&lt;/li>
&lt;/ol>
&lt;pre class="r">&lt;code># setup for using python code later in the page
# import the reticulate package
library(reticulate)
# specify the version of python to use
use_python(&amp;quot;/Users/&amp;lt;username&amp;gt;/.pyenv/shims/python&amp;quot;)&lt;/code>&lt;/pre>
&lt;ol start="2" style="list-style-type: decimal">
&lt;li>&lt;p>Note: In the chunk above, replace &lt;code>&amp;lt;username&amp;gt;&lt;/code> with your username. In addition, I use &lt;code>pyenv&lt;/code> to manage python versions on my system, as &lt;a href="https://blog.teclado.com/how-to-use-pyenv-manage-python-versions/">explained here&lt;/a>. If you don’t have &lt;code>pyenv&lt;/code> already, be sure to set it up using the instructions in the previous link.&lt;/p>&lt;/li>
&lt;li>&lt;p>You might hit an error when you run a python code chunk in Rmarkdown:&lt;/p>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> Error: &amp;#39;/Users/&amp;lt;username&amp;gt;/.pyenv/shims/python&amp;#39; was not built with a shared library.
reticulate can only bind to copies of Python built with &amp;#39;--enable-shared&amp;#39;.
Execution halted
Error : Failed to render content/post/&amp;lt;name_of_post&amp;gt;/index.en.Rmd&lt;/code>&lt;/pre>
&lt;ol start="4" style="list-style-type: decimal">
&lt;li>&lt;p>This just means I must build a version of python with the &lt;code>--enable-shared&lt;/code> flag. I do this using &lt;code>pyenv&lt;/code>.&lt;/p>&lt;/li>
&lt;li>&lt;p>First, choose a version of python that you want to use. You can do this by going to the terminal and typing&lt;/p>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> pyenv install --list&lt;/code>&lt;/pre>
&lt;ol start="6" style="list-style-type: decimal">
&lt;li>This should show you a long output, some of them will be python versions, as shown below:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> ...
3.10.1
3.10.2
3.10.3
3.10.4
3.10.5
3.10.6
3.10.7
3.10.8
3.10.9
3.10.10
3.11.0
...
&lt;/code>&lt;/pre>
&lt;ol start="7" style="list-style-type: decimal">
&lt;li>Choose an appropriate version and use the command below to install said version, like so (in the example below, I choose to install 3.11.0):&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> env PYTHON_CONFIGURE_OPTS=&amp;quot;--enable-shared&amp;quot; pyenv install 3.11.0&lt;/code>&lt;/pre>
&lt;ol start="8" style="list-style-type: decimal">
&lt;li>In the previous step, note the &lt;code>--enable-shared&lt;/code> option has now been added&lt;/li>
&lt;li>We now want to set this Python version to be the global Python version. Type the following command (replace 3.11.0 in the command below with the version you installed):&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> pyenv global 3.11.0&lt;/code>&lt;/pre>
&lt;ol start="10" style="list-style-type: decimal">
&lt;li>You can also check if the global version set is the correct version using the following command:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code> pyenv versions&lt;/code>&lt;/pre>
&lt;ol start="10" style="list-style-type: decimal">
&lt;li>&lt;p>If you’re using python packages (i.e. &lt;code>numpy&lt;/code>, &lt;code>pandas&lt;/code>, etc.) in your code chunks, make sure to install them first (i.e. by using &lt;code>pip3 install numpy&lt;/code>, &lt;code>pip3 install pandas&lt;/code>, etc. in the terminal)&lt;/p>&lt;/li>
&lt;li>&lt;p>With all of this set up, you should no longer see the error above when you knit Rmarkdown documents with Python code chunks in them.&lt;/p>&lt;/li>
&lt;/ol></description></item></channel></rss>