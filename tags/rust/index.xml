<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on The Journeyman Modeler</title><link>http://jmodeler.github.io/tags/rust/</link><description>Recent content in Rust on The Journeyman Modeler</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 03 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://jmodeler.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Calling Rust Functions from R using extendr - II</title><link>http://jmodeler.github.io/posts/2025-05-03-calling-rust-functions-from-r-using-extendr-ii/</link><pubDate>Sat, 03 May 2025 00:00:00 +0000</pubDate><guid>http://jmodeler.github.io/posts/2025-05-03-calling-rust-functions-from-r-using-extendr-ii/</guid><description>&lt;p>In a &lt;a href="https://jmodeler.github.io/posts/2025-04-27-calling-rust-functions-from-r-using-extendr/" class="external-link" target="_blank" rel="noopener">previous post&lt;/a>, I called a Rust function from R and did a speed test of that function against an equivalent R function. At the end of the post, I mentioned that we could use &lt;a href="https://en.wikipedia.org/wiki/Memoization" class="external-link" target="_blank" rel="noopener">memoization&lt;/a> to speed up the R function. I proceed to do that here.&lt;/p>
&lt;p>The speed test in the previous post might have been unfair to R, since it is well known that &lt;a href="https://stackoverflow.com/questions/6807068/why-is-my-recursive-function-so-slow-in-r" class="external-link" target="_blank" rel="noopener">R is not good with recursive function calls&lt;/a>. I now create a memoized version of the R function here:&lt;/p></description></item><item><title>Calling Rust Functions from R using extendr</title><link>http://jmodeler.github.io/posts/2025-04-27-calling-rust-functions-from-r-using-extendr/</link><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid>http://jmodeler.github.io/posts/2025-04-27-calling-rust-functions-from-r-using-extendr/</guid><description>&lt;p>In this post, I attempt to call a &lt;a href="https://www.rust-lang.org/" class="external-link" target="_blank" rel="noopener">Rust&lt;/a> function from an &lt;a href="https://cran.r-project.org/" class="external-link" target="_blank" rel="noopener">R&lt;/a> session and compare the runtime of that function to a similar function written in R.&lt;/p>
&lt;p>The &lt;a href="https://github.com/extendr/rextendr" class="external-link" target="_blank" rel="noopener">rextendr&lt;/a> R library allows us to call rust functions from an R session. As the repository linked above mentions, you &amp;ldquo;&lt;a href="https://cran.r-project.org/" class="external-link" target="_blank" rel="noopener">need to setup a working Rust toolchain&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>I write a Rust function to get the &lt;code>\(n^{th}\)&lt;/code> &lt;a href="https://en.wikipedia.org/wiki/Fibonacci_sequence" class="external-link" target="_blank" rel="noopener">Fibonacci term&lt;/a>, and then compile it using the &lt;code>rust_source()&lt;/code> function from the &lt;code>rextendr&lt;/code> library, as shown below:&lt;/p></description></item></channel></rss>